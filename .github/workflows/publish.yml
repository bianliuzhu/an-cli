name: Publish

on:
  workflow_dispatch:

permissions:
  contents: write
  id-token: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Generate version number
        id: version
        run: |
          # 使用 Node.js 生成日期版本号，避免 shell 兼容性问题
          node << 'SCRIPT'
          const fs = require('fs');
          const { execSync } = require('child_process');

          // 获取当前日期 (YY.M.D 格式，去除前导零)
          const now = new Date();
          const year = now.getFullYear().toString().slice(-2);
          const month = (now.getMonth() + 1).toString();
          const day = now.getDate().toString();
          const dateVersion = `${year}.${month}.${day}`;

          console.log(`Date version: ${dateVersion}`);

          // 获取包名
          const pkg = require('./package.json');
          const packageName = pkg.name;

          // 获取已发布的所有版本
          let existingVersions = [];
          try {
            const versionsJson = execSync(`npm view ${packageName} versions --json`, { encoding: 'utf-8' });
            existingVersions = JSON.parse(versionsJson);
          } catch (e) {
            console.log('Package not found or no versions published yet');
            existingVersions = [];
          }

          console.log('Existing versions:', existingVersions);

          // 查找今天发布的版本
          const todayVersions = existingVersions.filter(v => v.startsWith(dateVersion));
          console.log('Today\'s versions:', todayVersions);

          let newVersion;
          if (todayVersions.length === 0) {
            // 今天第一次发布
            newVersion = dateVersion;
          } else {
            // 找出最大的补丁号
            let maxPatch = 0;
            
            todayVersions.forEach(v => {
              if (v === dateVersion) {
                maxPatch = Math.max(maxPatch, 0);
              } else {
                const match = v.match(new RegExp(`^${dateVersion.replace(/\./g, '\\.')}\\.(\\d+)$`));
                if (match) {
                  maxPatch = Math.max(maxPatch, parseInt(match[1]));
                }
              }
            });
            
            newVersion = `${dateVersion}.${maxPatch + 1}`;
          }

          console.log(`New version: ${newVersion}`);

          // 更新 package.json
          pkg.version = newVersion;
          fs.writeFileSync('package.json', JSON.stringify(pkg, null, '\t') + '\n');

          // 输出到 GitHub Actions
          fs.appendFileSync(process.env.GITHUB_OUTPUT, `version=${newVersion}\n`);
          SCRIPT

      - name: Build
        run: npm run build

      - name: Publish to npm
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true

      - name: Setup Node.js for GitHub Packages
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@bianliuzhu'

      - name: Update package name for GitHub Packages
        run: |
          # 备份原始 package.json
          cp package.json package.json.backup

          # 为 GitHub Packages 添加作用域到包名
          node -e "const fs = require('fs'); const pkg = require('./package.json'); pkg.name = '@bianliuzhu/anl'; pkg.publishConfig = { registry: 'https://npm.pkg.github.com' }; fs.writeFileSync('package.json', JSON.stringify(pkg, null, '\t') + '\n');"

      - name: Publish to GitHub Packages
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore original package.json
        run: |
          # 恢复原始 package.json
          mv package.json.backup package.json

      - name: Create Git Tag
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add package.json
          git commit -m "chore: release version ${{ steps.version.outputs.version }}" || echo "No changes to commit"
          git tag "v${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}" || echo "Tag already exists"
