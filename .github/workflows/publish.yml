name: Publish

on:
  release:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write
  id-token: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Generate version number
        id: version
        run: |
          # 获取当前日期 (YY.MM.DD) - 去除月份和日期的前导零
          YEAR=$(date +"%y")
          MONTH=$(date +"%m" | sed 's/^0//')
          DAY=$(date +"%d" | sed 's/^0//')
          DATE_VERSION="${YEAR}.${MONTH}.${DAY}"

          # 获取包名
          PACKAGE_NAME=$(node -p "require('./package.json').name")

          # 检查该日期版本是否存在，并获取当天的所有版本
          EXISTING_VERSIONS=$(npm view $PACKAGE_NAME versions --json 2>/dev/null || echo "[]")

          echo "Existing versions: $EXISTING_VERSIONS"

          # 查找当天已发布的所有版本
          TODAY_VERSIONS=$(echo "$EXISTING_VERSIONS" | jq -r ".[]" | grep "^${DATE_VERSION}" || echo "")

          echo "Today's versions: $TODAY_VERSIONS"

          if [ -z "$TODAY_VERSIONS" ]; then
            # 当天第一次发布
            NEW_VERSION="$DATE_VERSION"
          else
            # 当天已有发布，找出最大序号
            MAX_PATCH=0
            
            # 检查是否存在基础版本（如 25.10.13）
            if echo "$TODAY_VERSIONS" | grep -q "^${DATE_VERSION}$"; then
              MAX_PATCH=0
            fi
            
            # 查找所有带序号的版本（如 25.10.13.1, 25.10.13.2）
            for version in $TODAY_VERSIONS; do
              if [[ $version =~ ^${DATE_VERSION}\.([0-9]+)$ ]]; then
                PATCH_NUM="${BASH_REMATCH[1]}"
                if [ "$PATCH_NUM" -gt "$MAX_PATCH" ]; then
                  MAX_PATCH=$PATCH_NUM
                fi
              fi
            done
            
            NEXT_PATCH=$((MAX_PATCH + 1))
            NEW_VERSION="${DATE_VERSION}.${NEXT_PATCH}"
          fi

          echo "Generated version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # 使用 node 直接更新 package.json 中的版本号
          node -e "const fs = require('fs'); const pkg = require('./package.json'); pkg.version = '$NEW_VERSION'; fs.writeFileSync('package.json', JSON.stringify(pkg, null, '\t') + '\n');"

          echo "Updated package.json to version $NEW_VERSION"

      - name: Build
        run: npm run build

      - name: Publish to npm
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true

      - name: Setup Node.js for GitHub Packages
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@bianliuzhu'

      - name: Update package name for GitHub Packages
        run: |
          # 备份原始 package.json
          cp package.json package.json.backup

          # 为 GitHub Packages 添加作用域到包名
          node -e "const fs = require('fs'); const pkg = require('./package.json'); pkg.name = '@bianliuzhu/anl'; pkg.publishConfig = { registry: 'https://npm.pkg.github.com' }; fs.writeFileSync('package.json', JSON.stringify(pkg, null, '\t') + '\n');"

      - name: Publish to GitHub Packages
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore original package.json
        run: |
          # 恢复原始 package.json
          mv package.json.backup package.json

      - name: Create Git Tag
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add package.json
          git commit -m "chore: release version ${{ steps.version.outputs.version }}" || echo "No changes to commit"
          git tag "v${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}" || echo "Tag already exists"
